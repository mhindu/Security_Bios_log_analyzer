{
    "keyword_mapping": {
        "[IA32_TME_ACTIVATE MSR 982h] =": ["MKTME info", "TME_ACTIVATE MSR 982h"],
        "[IA32_TME_CAPABILITY MSR 981h] =": ["MKTME info", "TME_CAPABILITY MSR 981h"],
        "MKTME: total keys": ["MKTME info", "Total Keys"],
        "mktme keys-ids": ["MKTME info", "MKTME Keys"],
        "ACTM location found!": ["ACTM info", "ACTM location"],
        "starts ACTM launch (GETSEC[ENTERACCS])": ["ACTM info", "Is ACTM launch started?"],
        "[ACTM] Socket[00] (SBSP) returned": ["ACTM info", "ACTM ErrorCode"],
        "[LT EMIF register at 0xFED30200]: ": ["ACTM info", "Is this PROD SKU?"],
        "Error: Mcheck code error -> LP0000": ["SGX info", "Mcheck Error Code ?"],
        "SGX (Secure Enclaves) feature enabled": ["SGX info", "Is SGX enabled?"],
        "build_date ": ["TDX info", "TDX module build date"],
        "build_num ": ["TDX info", "TDX module build version"],
        "TDX module initialized": ["TDX info", "Is TDX module initialized?"],
        "svtdx: Driver and seamrr target initialized": ["TDX info", "Is SEAMRR Initialized?"],
        "SEAMRR_BASE MSR 1400h": ["TDX info", "SEAMRR_BASE MSR 1400h"],
        "SEAMRR_MASK MSR 1401h": ["TDX info", "SEAMRR_MASK MSR 1401h"],
        "LT_STATUS[0xFED30000]": ["BTG & TXT info", "LT_STATUS[0xFED30000]"],
        "LT_EXTENDED_STATUS[0xFED30008]": ["BTG & TXT info", "LT_EXTENDED_STATUS[0xFED30008]"],
        "LT_BOOT_STATUS[0xFED300A0]": ["BTG & TXT info", "LT_BOOT_STATUS[0xFED300A0]"],
        "LT_ERROR_CODE[0xFED30328]": ["BTG & TXT info", "LT_ERROR_CODE[0xFED30328]"],
        "LT_CRASH[0xFED30030]": ["BTG & TXT info", "LT_CRASH[0xFED30030]"],
        "MSR_BOOT_GUARD_SACM_INFO[0x0000013A]": ["BTG & TXT info", "SACM_INFO[0x0000013A]"],
        "Bios ID: ": ["System info", "BIOS ID"]
    },
    "checks": [
        {
            "name": "IA32_TME_ACTIVATE MSR",
            "keyword": "[IA32_TME_ACTIVATE MSR 982h] =",
            "start_index_offset": 0,
            "regex_pattern": "\\b(0x[0-9A-Fa-f]+(?:\\s+[0-9A-Fa-f]+)*)\\b",
            "exclude_chars": [],
            "output_cells": {
                "C2": "ia32_tme_activate_text",
                "D2": "result_text_str"
            },
            "result_text_ia32_tme_activate": [
                {
                    "description": "Total key bits",
                    "bits_range": [-36, -32],
                    "hex_format": true,
                    "calculation": "2 ** int(bits)",
                    "output_format": "Total key bits: {hex_value} - ie.Total {calculated_value} keys are allocated"
                },
                {
                    "description": "TME bit",
                    "bits_range": [-2, -1],
                    "hex_format": true,
                    "output_format": "TME bit: {hex_value} - ie. key0 is allocated"
                },
                {
                    "description": "TDX key bits",
                    "bits_range": [-40, -36],
                    "hex_format": true,
                    "output_format": "TDX key bits: {hex_value}"
                },
                {
                    "description": "mktme_alg_enable",
                    "bits_range": [-64, -48],
                    "hex_format": true,
                    "output_format": "mktme_alg_enable: {hex_value} ie. {algorithm}",
                    "algorithm_map": {
                        "0x4": "AES-XTS-256 alg is enabled",
                        "0xc": "AES-XTS-256i alg is enabled",
                        "0x3": "AES-XTS-128i alg is enabled",
                        "0x1": "AES-XTS-128 alg is enabled"
                    }
                }
            ],
            "improper_print_message": "improper print - {ia32_tme_activate_text}"
        },
        {
            "name": "IA32_TME_CAPABILITY MSR",
            "keyword": "[IA32_TME_CAPABILITY MSR 981h] =",
            "start_index_offset": 0,
            "regex_pattern": "\\b(0x[0-9A-Fa-f]+(?:\\s+[0-9A-Fa-f]+)*)\\b",
            "exclude_chars": [],
            "output_cells": {
                "C3": "ia32_tme_capability_text",
                "D3": "result_text_str"
            },
            "result_text_ia32_tme_capability": [
                {
                    "description": "mktme_max_keyid_bits",
                    "bits_range": [-36, -32],
                    "hex_format": true,
                    "calculation": "2 ** int(bits)",
                    "output_format": "mktme_max_keyid_bits: {hex_value} ie. {calculated_value} keys"
                },
                {
                    "description": "mktme_max_keys",
                    "bits_range": [-51, -36],
                    "hex_format": true,
                    "calculation": "int(bits)",
                    "output_format": "mktme_max_keys: {hex_value} ie. [0-{calculated_value} keys]"
                }
            ],
            "improper_print_message": "improper print - {ia32_tme_capability_text}"
        },
        {
            "name": "MKTME: total keys",
            "keyword": "MKTME: total keys",
            "start_index_offset": 0,
            "regex_pattern": "\\b(\\d+)\\b",
            "exclude_chars": [],
            "output_cells": {
                "B4": "Total Keys",
                "C4": "total_keys_text",
                "D4": "result_text_str"
            },
            "result_text_total_keys": [
                {
                    "description": "Total keys allocated",
                    "bits_range": [0, 2],
                    "output_format": "Total keys allocated: key0 - key{total_keys_text}"
                }
            ],
            "improper_print_message": "Keys allocation is not present in log"
        },
        {
            "name": "mktme key-ids",
            "keyword": "mktme keys-ids",
            "start_index_offset": 0,
            "regex_pattern": "\\b(\\d+)\\b",
            "exclude_chars": [],
            "output_cells": {
                "B5": "MKTME Keys",
                "C5": "mktme_key_text",
                "D5": "result_text_str"
            },
            "result_text_mktme_keys": [
                {
                    "description": "Mktme keys allocated",
                    "output_format": "Mktme keys allocated: key1 - key{mktme_key_text}"
                },
                {
                    "description": "TDX keys allocated",
                    "condition": "total_keys_text != mktme_key_text",
                    "output_format": "TDX keys allocated: key{mktme_key_text} - key{total_keys_text}"
                },
                {
                    "description": "No TDX keys allocated",
                    "condition": "total_keys_text == mktme_key_text",
                    "output_format": "No TDX keys are allocated"
                }
            ],
            "improper_print_message": "MKTME keys are not enabled"
        },
        {
            "name": "ACTM location",
            "keyword": "ACTM location found!",
            "start_index_offset": 0,
            "regex_pattern": "\\b(0x[0-9A-Fa-f]+)\\b",
            "num_bits": 12,
            "exclude_chars": ["(", ")"],
            "output_cells": {
                "B6": "ACTM location",
                "C6": "actm_location_text"
            },
            "improper_print_message": "ACTM location is not present in log",
            "validation_pattern": "^(0x)?[0-9A-Fa-f]+$",
            "validation_failure_message": "improper print - {actm_location_text}"
        },
        {
            "name": "start ACTM",
            "keyword": "starts ACTM launch (GETSEC[ENTERACCS])",
            "output_cells": {
                "B7": "Is ACTM launch started?",
                "C7": "ACTM launch status",
                "D7": "ACTM launch status"
            },
            "secondary_keyword": "[ACTM] Launch skipped!",
            "secondary_output": "ACTM launch is skipped",
            "improper_print_message": "ACTM launch status is not present in log",
            "default_result": {
                "C7": "ACTM launch status is not present in log",
                "D7": "ACTM launch status is not present in log"
            }
        },
        {
            "name": "ACTM error code",
            "keyword": "[ACTM] Socket[00] (SBSP) returned",
            "exclude_chars": ["(", ")"],
            "output_cells": {
                "B8": "ACTM ErrorCode",
                "C8": "actm_error_code_text",
                "D8": "actm_error_code_text"
            },
            "improper_print_message": "ACTM error code is not present in log",
            "default_result": {
                "C8": "0x0",
                "D8": "ACTM error code is not present in log"
            }
        },
        {
            "name": "prod_sku",
            "keyword": "[LT EMIF register at 0xFED30200]: ",
            "start_index_offset": 0,
            "regex_pattern": "\\b(0x[0-9A-Fa-f]+)\\b",
            "exclude_chars": [],
            "output_cells": {
                "B9": "Is this PROD SKU?",
                "C9": "prod_sku_text",
                "D9": "prod_sku_result"
            },
            "validation_pattern": "^(0x)?[0-9A-Fa-f]+$",
            "validation_failure_message": "improper print - {prod_sku_text}",
            "result_text": [
                {
                    "description": "Prod SKU check",
                    "output_format": "Bit 31 is {bit31_status}, It is {sku_type} SKU, recommended {patch_type} patches",
                    "bit_check": 31,
                    "bit_set_text": "set",
                    "bit_unset_text": "unset",
                    "bit_set_type": "prod",
                    "bit_unset_type": "debug",
                    "bit_set_patch": "Prod",
                    "bit_unset_patch": "debug"
                }
            ],
            "improper_print_message": "Prod SKU status is not present in log"
        }
    ]
}