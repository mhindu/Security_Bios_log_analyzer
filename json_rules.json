{
  "keyword_mapping": {
      "[IA32_TME_ACTIVATE MSR 982h] =": ["MKTME info", "TME_ACTIVATE MSR 982h"],
      "[IA32_TME_CAPABILITY MSR 981h] =": ["MKTME info", "TME_CAPABILITY MSR 981h"],
      "MKTME: total keys": ["MKTME info", "Total Keys"],
        "mktme keys-ids": ["MKTME info", "MKTME Keys"],
        "ACTM location found!": ["ACTM info", "ACTM location"],
        "starts ACTM launch (GETSEC[ENTERACCS])": ["ACTM info", "Is ACTM launch started?"],
        "[ACTM] Socket[00] (SBSP) returned": ["ACTM info", "ACTM ErrorCode"],
        "[LT EMIF register at 0xFED30200]: ": ["ACTM info", "Is this PROD SKU?"],
        "Error: Mcheck code error -> LP0000": ["SGX info", "Mcheck Error Code ?"],
        "SGX (Secure Enclaves) feature enabled": ["SGX info", "Is SGX enabled?"],
        "build_date ": ["TDX info", "TDX module build date"],
        "build_num ": ["TDX info", "TDX module build version"],
        "TDMR CMR Range": ["TDX info", "tdx-svos: TDMR: adding CMR:"],
        "TDX module initialized": ["TDX info", "Is TDX module initialized?"],
        "Driver and seamrr target initialized": ["TDX info", "Is SEAMRR Initialized?"],
        "SEAMRR_BASE MSR 1400h": ["TDX info", "SEAMRR_BASE MSR 1400h"],
        "SEAMRR_MASK MSR 1401h": ["TDX info", "SEAMRR_MASK MSR 1401h"],
        "ACM Build Date": ["BTG & TXT info", "ACM Build Date"],
        "LT_STATUS[0xFED30000]": ["BTG & TXT info", "LT_STATUS[0xFED30000]"],
        "LT_EXTENDED_STATUS[0xFED30008]": ["BTG & TXT info", "LT_EXTENDED_STATUS[0xFED30008]"],
        "LT_BOOT_STATUS[0xFED300A0]": ["BTG & TXT info", "LT_BOOT_STATUS[0xFED300A0]"],
        "LT_ERROR_CODE[0xFED30328]": ["BTG & TXT info", "LT_ERROR_CODE[0xFED30328]"],
        "LT_CRASH[0xFED30030]": ["BTG & TXT info", "LT_CRASH[0xFED30030]"],
        "MSR_BOOT_GUARD_SACM_INFO[0x0000013A]": ["BTG & TXT info", "SACM_INFO[0x0000013A]"],
        "Bios ID: ": ["System info", "BIOS ID"],
        "DIMM Info ": ["System info", "DIMM Info "]
  },
  "checks": [
    {
      "name": "IA32_TME_ACTIVATE MSR",
      "msr": "982h",
      "keyword": "[IA32_TME_ACTIVATE MSR 982h] =",
      "regex_pattern": "\\b(0x[0-9A-Fa-f]+\\s+[0-9A-Fa-f]+)\\b",
      "num_bits": 20,
      "skip_bits": 0,
      "exclude_chars": [],
      "pattern": "^0x?[0-9A-Fa-f]+$",
      "result_text_ia32_tme_activate": [
                {
                    "description": "Total key bits",
                    "bits_range": [-36, -32],
                    "hex_format": true,
                    "calculation": "2 ** int(bits)",
                    "output_format": "Total key bits: {hex_value} - ie.Total {calculated_value} keys are allocated"
                },
                {
                    "description": "TME bit",
                    "bits_range": [-2, -1],
                    "hex_format": true,
                    "output_format": "TME bit: {hex_value} - ie. key0 is allocated"
                },
                {
                    "description": "TDX key bits",
                    "bits_range": [-40, -36],
                    "hex_format": true,
                    "output_format": "TDX key bits: {hex_value}"
                },
                {
                    "description": "mktme_alg_enable",
                    "bits_range": [-64, -48],
                    "hex_format": true,
                    "output_format": "mktme_alg_enable: {hex_value} ie. {algorithm}",
                    "algorithm_map": {
                        "0x4": "AES-XTS-256 alg is enabled",
                        "0xc": "AES-XTS-256i alg is enabled",
                        "0x3": "AES-XTS-128i alg is enabled",
                        "0x1": "AES-XTS-128 alg is enabled"
                    }
              }
      ],
      "improper_print_message": "improper print - {ia32_tme_activate_text}"
    },
    {
      "name": "IA32_TME_CAPABILITY MSR",
      "msr": "981h",
      "keyword": "[IA32_TME_CAPABILITY MSR 981h] =",
      "start_index_offset": 0,
      "regex_pattern": "\\b(0x[0-9A-Fa-f]+(?:\\s+[0-9A-Fa-f]+)*)\\b",
      "num_bits": 20,
      "skip_bits": 0,
      "exclude_chars": [],
      "pattern": "^0x?[0-9A-Fa-f]+$",
      "process_last_instance": true,
      "result_text_ia32_tme_capability": [
                {
                    "description": "mktme_max_keyid_bits",
                    "bits_range": [-36, -32],
                    "hex_format": true,
                    "calculation": "2 ** int(bits)",
                    "output_format": "mktme_max_keyid_bits: {hex_value} ie. {calculated_value} keys"
                },
                {
                    "description": "mktme_max_keys",
                    "bits_range": [-51, -36],
                    "hex_format": true,
                    "calculation": "int(bits)",
                    "output_format": "mktme_max_keys: {hex_value} ie. [0-{calculated_value} keys]"
                }
      ],
      "improper_print_message": "improper print - {ia32_tme_capability_text}"
    },
    {
            "name": "MKTME: total keys",
            "keyword": "MKTME: total keys",
            "start_index_offset": 0,
            "regex_pattern": "\\b(\\d+)\\b",
            "exclude_chars": [],
            "process_last_instance": true,
            "result_text_total_keys": [
                {
                    "description": "Total keys allocated",
                    "bits_range": [0, 2],
                    "output_format": "Total keys allocated: key0 - key{total_keys_text}"
                }
            ],
            "improper_print_message": "Keys allocation is not present in log"
        },
        {
            "name": "mktme key-ids",
            "keyword": "mktme keys-ids",
            "start_index_offset": 0,
            "regex_pattern": "\\b(\\d+)\\b",
            "exclude_chars": [],
            "process_last_instance": true,
            "result_text_mktme_keys": [
                {
                    "description": "Mktme keys allocated",
                    "output_format": "Mktme keys allocated: key1 - key{mktme_key_text}"
                },
                {
                    "description": "TDX keys allocated",
                    "condition": "total_keys_text != mktme_key_text",
                    "output_format": "TDX keys allocated: key{tdx_start_key} - key{total_keys_text}"
                },
                {
                    "description": "No TDX keys allocated",
                    "condition": "total_keys_text == mktme_key_text",
                    "output_format": "No TDX keys are allocated"
                }
            ],
            "improper_print_message": "MKTME keys are not enabled"
        },
         {
            "name": "ACTM location",
            "keyword": "ACTM location found!",
            "start_index_offset": 0,
            "regex_pattern": "\\b(0x[0-9A-Fa-f]+)\\b",
            "num_bits": 12,
            "exclude_chars": ["(", ")"],
            "process_last_instance": true,
            "improper_print_message": "ACTM location is not present in log",
            "validation_pattern": "^(0x)?[0-9A-Fa-f]+$",
            "validation_failure_message": "improper print - {actm_location_text}"
        },
        {
            "name": "start ACTM",
            "keyword": "starts ACTM launch (GETSEC[ENTERACCS])",
            "process_last_instance": true,
            "secondary_keyword": "[ACTM] Launch skipped!",
            "secondary_output": "ACTM launch is skipped",
            "improper_print_message": "ACTM launch status is not present in log"
        },
        {
            "name": "ACTM error code",
            "keyword": "[ACTM] Socket[00] (SBSP) returned",
            "exclude_chars": ["(", ")"],
            "process_last_instance": true,
            "improper_print_message": "ACTM error code is not present in log"
        },
        {
            "name": "prod_sku",
            "keyword": "[LT EMIF register at 0xFED30200]: ",
            "start_index_offset": 0,
            "regex_pattern": "\\b(0x[0-9A-Fa-f]+)\\b",
            "exclude_chars": [],
            "process_last_instance": true,
            "validation_pattern": "^(0x)?[0-9A-Fa-f]+$",
            "validation_failure_message": "improper print - {prod_sku_text}",
            "result_text": [
                {
                    "description": "Prod SKU check",
                    "output_format": "Bit 31 is {bit31_status}, It is {sku_type} SKU, recommended {patch_type} patches",
                    "bit_check": 31,
                    "bit_set_text": "set",
                    "bit_unset_text": "unset",
                    "bit_set_type": "prod",
                    "bit_unset_type": "debug",
                    "bit_set_patch": "Prod",
                    "bit_unset_patch": "debug"
                }
            ],
            "improper_print_message": "Prod SKU status is not present in log"
        },
        {
            "name": "Mcheck Error Code",
            "keyword": "Error: Mcheck code error -> LP0000",
            "num_bits": 0,
            "exclude_chars": ["(", ")"],
            "process_last_instance": true,
            "secondary_keyword": "[SGX] SgxErrorCode = ",
            "regex_pattern": "\\b(0x[0-9A-Fa-f]+)\\b",
            "secondary_condition": {
                "expected": "0x0",
                "success_output": "No Mcheck - SGX enabled successfully",
                "failure_output": "mcheck error code is not present in log"
            },
            "use_secondary_if_none": true,
            "trim_processing": {
                "trim_whitespace": true,
                "if_starts_with": "0xF",
                "replacement_prefix": "0x",
                "remove_chars_count": 3
            },
            "validation_pattern": "^(0x)?[0-9A-Fa-f]+$",
            "validation_failure_message": "improper print - {mcheck_code_text}",
            "result_text": [
                {
                    "description": "Mcheck Error",
                    "output_format": "Mcheck Error is {error_description}",
                    "error_code_file_path": "Mcheck_error_codes.xlsx",
                    "error_code_column": 0,
                    "error_description_column": 1
                }
            ]
        },
        {
            "name": "SGX enabled check",
            "keyword": "SGX (Secure Enclaves) feature enabled",
            "improper_print_message": "SGX is not enabled",
            "secondary_output": "SGX is enabled"
        },
        {
            "name": "TDX build date check",
            "keyword": "build_date ",
            "num_bits": 8,
            "improper_print_message": "TDX is not enabled"
        },
        {
            "name": "TDMR CMR Range",
            "keyword": "tdx-svos: TDMR: adding CMR:",
            "regex_pattern": "tdx-svos: TDMR: adding CMR:.*?(\\[[^\\]]+\\))",
            "fields": [
                {
                    "description": "TDMR CMR Range",
                    "group": 1,
                    "output_format": "TDMR CMR Range: {value}"
                }
            ],
            "improper_print_message": "improper print - TDMR CMR range not found"
        },
        {
            "name": "TDX module initialization check",
            "keyword": "TDX module initialized",
            "start_index_offset": 0,
            "regex_pattern": ".*",
            "improper_print_message": "TDX module not initialized",
            "secondary_output": "TDX module initialized"
        },
        {
            "name": "SEAMRR initialization check",
            "keyword": "Driver and seamrr target initialized",
            "improper_print_message": "SEAMRR target not found",
            "secondary_output": "Driver and seamrr target initialized"
        },
        {
            "name": "SEAMRR_base",
            "keyword": "SEAMRR_BASE MSR 1400h",
            "num_bits": 25,
            "improper_print_message": "SEAMRR Base range is not present in log",
            "validation_pattern": "^(0x)?[0-9A-Fa-f]{16}$",
            "validation_failure_message": "improper print - {seamrr_base_text_cleaned}",
            "result_text": [
                {
                    "description": "SEAMRR base check",
                    "output_format": "Bit 3 is {bit3_status}, Bios {bit3_config} SEAMRR_Base",
                    "bit_check": 3,
                    "bit_set_text": "set",
                    "bit_unset_text": "not set",
                    "bit_set_config": "configured",
                    "bit_unset_config": "does not configure"
                }
            ]
        },
        {
            "name": "SEAMRR_mask",
            "keyword": "SEAMRR_MASK MSR 1401h",
            "num_bits": 25,
            "improper_print_message": "SEAMRR Mask range is not present in log",
            "validation_pattern": "^(0x)?[0-9A-Fa-f]{16}$",
            "validation_failure_message": "improper print - {seamrr_mask_text_cleaned}",
            "result_text": [
                {
                    "description": "SEAMRR mask check",
                    "output_format": "{bit10_status} bit 10 lock bit and {bit11_status} bit 11 valid bit are set",
                    "bit10_check": 10,
                    "bit11_check": 11,
                    "bit_set_text": "set",
                    "bit_unset_text": "not set"
                }
            ]
        },
        {
            "name": "ACM Build Date",
            "keyword": "ACM Build Date:",
            "regex_pattern": "ACM Build Date:\\s*(\\d{8})",
            "fields": [
                {
                "description": "ACM Build Date",
                "group": 1,
                "output_format": "ACM Build Date: {value} (YYYYMMDD)"
                }
            ],
            "improper_print_message": "improper print - ACM Build Date not found"
        },
        {
            "name": "LT_STATUS info",
            "keyword": "LT_STATUS[0xFED30000]",
            "num_bits": 21,
            "exclude_chars": ["="],
            "improper_print_message": "LT_status is not present in log",
            "validation_pattern": "^(0x)?[0-9A-Fa-f]{16}$",
            "validation_failure_message": "improper print - {lt_status_info_text}",
            "result_text": [
                {
                    "description": "LT_STATUS check",
                    "output_format": "bit {bit_position} is {bit_status} - {bit_message}",
                    "bit_check": 1,
                    "bit_set_text": "set",
                    "bit_unset_text": "not set",
                    "bit_set_message": "SEEXIT Status is Done",
                    "bit_unset_message": "SEEXIT Status is Not Done"
                }
            ]
        },
        {
            "name": "LT_EXTENDED_STATUS info",
            "keyword": "LT_EXTENDED_STATUS[0xFED30008]",
            "num_bits": 21,
            "exclude_chars": ["="],
            "improper_print_message": "LT_extended_status is not present in log",
            "validation_pattern": "^(0x)?[0-9A-Fa-f]{16}$",
            "validation_failure_message": "improper print - {lt_extended_status_info_text}",
            "result_text": [
                {
                    "description": "LT_EXTENDED_STATUS check",
                    "output_format": "bit 0 is {bit0_status} - LT_poison_status is {poison_status}",
                    "bit_check": 0,
                    "bit_set_text": "set",
                    "bit_unset_text": "unset",
                    "bit_set_poison_status": "received",
                    "bit_unset_poison_status": "not received"
                }
            ]
        },
        {
            "name": "LT_BOOT_STATUS info",
            "keyword": "LT_BOOT_STATUS[0xFED300A0]",
            "num_bits": 21,
            "exclude_chars": ["="],
            "improper_print_message": "LT_boot_status is not present in log",
            "validation_pattern": "^(0x)?[0-9A-Fa-f]{16}$",
            "validation_failure_message": "improper print - {lt_boot_status_info_text}",
            "result_text": [
                {
                    "description": "LT_BOOT_STATUS check",
                    "output_format": "{bit30_status} - TXT startup {txt_status}\n{bit31_status} - BTG startup {btg_status}\n{bit59_status} - BIOS is {bios_status}\n{bit62_status} - CPU sets error as {cpu_error_status}\n{bit63_status} - S-ACM {sacm_status}",
                    "bit30_check": 30,
                    "bit31_check": 31,
                    "bit59_check": 59,
                    "bit62_check": 62,
                    "bit63_check": 63,
                    "bit_set_text": "Bit {bit} set",
                    "bit_unset_text": "Bit {bit} is unset",
                    "bit30_set_txt_status": "success",
                    "bit30_unset_txt_status": "not success",
                    "bit31_set_btg_status": "success",
                    "bit31_unset_btg_status": "not success",
                    "bit59_set_bios_status": "trusted as a part of TXT or BTG flow",
                    "bit59_unset_bios_status": "untrusted",
                    "bit62_set_cpu_error_status": "SACM authentication failed",
                    "bit62_unset_cpu_error_status": "No CPU error - No SACM authentication failure",
                    "bit63_set_sacm_status": "success as BTG/TXT flow is successful",
                    "bit63_unset_sacm_status": "execution failed"
                }
            ]
        },
        {
            "name": "LT_ERROR_CODE info",
            "keyword": "LT_ERROR_CODE[0xFED30328]",
            "num_bits": 21,
            "exclude_chars": ["="],
            "improper_print_message": "LT_error_status is not present in log",
            "validation_pattern": "^(0x)?[0-9A-Fa-f]{16}$",
            "validation_failure_message": "improper print - {lt_error_code_info_text}",
            "result_text": [
                {
                    "description": "LT_ERROR_CODE check",
                    "output_format": "Bit 31 is {bit31_status} - Entire content of this register is {register_status}\nBit 15 is {bit15_status} - SACM has {sacm_status}\nBit 30 is {bit30_status} - SACM has {error_status}",
                    "bit31_check": 31,
                    "bit15_check": 15,
                    "bit30_check": 30,
                    "bit_set_text": "set",
                    "bit_unset_text": "unset",
                    "bit31_set_register_status": "valid",
                    "bit31_unset_register_status": "invalid",
                    "bit15_set_sacm_status": "started successfully",
                    "bit15_unset_sacm_status": "not started",
                    "bit30_set_error_status": "generated errorcodes",
                    "bit30_unset_error_status": "not generated errorcodes"
                }
            ]
        },
        {
            "name": "LT_CRASH info",
            "keyword": "LT_CRASH[0xFED30030]",
            "num_bits": 21,
            "exclude_chars": ["="],
            "improper_print_message": "LT_crash is not present in log",
            "validation_pattern": "^(0x)?[0-9A-Fa-f]{16}$",
            "validation_failure_message": "improper print - {lt_crash_info_text}",
            "result_text": [
                {
                    "description": "LT_CRASH check",
                    "output_format": "Bit 31 is {bit31_status} - LT_Crash is {crash_status}\nCrash induced by {crash_source}",
                    "bit31_check": 31,
                    "bit30_check": 30,
                    "bit_set_text": "set",
                    "bit_unset_text": "unset",
                    "bit31_set_crash_status": "set",
                    "bit31_unset_crash_status": "not seen",
                    "bit30_set_crash_source": "internal CPU",
                    "bit30_unset_crash_source": "external ACM, MLE"
                }
            ]
        },
        {
            "name": "SACM_INFO info",
            "keyword": "MSR_BOOT_GUARD_SACM_INFO[0x0000013A]",
            "num_bits": 21,
            "exclude_chars": ["="],
            "improper_print_message": "SACM_INFO is not present in log",
            "validation_pattern": "^(0x)?[0-9A-Fa-f]{16}$",
            "validation_failure_message": "improper print - {sacm_info_text}",
            "result_text": [
                {
                    "description": "SACM_INFO check",
                    "output_format": "Bit 34 is {bit34_status} - LT_SX_EN Fuse is {fuse_status}\nBit 32 is {bit32_status} - BTG is {btg_status}\n{btg_profile_status}",
                    "bit34_check": 34,
                    "bit32_check": 32,
                    "bit0_check": 0,
                    "bit2_check": 2,
                    "bit3_check": 3,
                    "bit4_check": 4,
                    "bit5_check": 5,
                    "bit6_check": 6,
                    "bit_set_text": "set",
                    "bit_unset_text": "unset",
                    "bit34_set_fuse_status": "enabled",
                    "bit34_unset_fuse_status": "disabled",
                    "bit32_set_btg_status": "enabled",
                    "bit32_unset_btg_status": "not enabled",
                    "btg_profile_status": [
                        {
                            "condition": "bit0_set and bit2_set and bit3_set and bit4_set and bit5_set and bit6_set",
                            "output": "BTG-5 profile is enabled & TPM Success"
                        },
                        {
                            "condition": "bit0_set and bit2_set and bit3_set and bit5_set and bit6_set",
                            "output": "BTG-3 profile is enabled & TPM Success"
                        },
                        {
                            "condition": "bit0_set and bit4_set and bit6_set",
                            "output": "BTG-4 profile is enabled"
                        },
                        {
                            "condition": "not (bit0_set and bit2_set and bit3_set and bit4_set and bit5_set and bit6_set) and not (bit0_set and bit2_set and bit3_set and bit5_set and bit6_set) and not (bit0_set and bit4_set and bit6_set)",
                            "output": "No BTG profile enabled"
                        }
                    ]
                }
            ]
        },
        {
            "name": "BIOS ID info",
            "keyword": "Bios ID: ",
            "num_bits": 0,
            "improper_print_message": "Bios_ID is not present in log"
        },
        {
            "name": "DIMM Size",
            "keyword": "Channel   :",
            "regex_pattern": "Channel\\s*:\\s*(\\d)\\s*DDR Size\\s*:\\s*(\\d+)\\((\\d+MB)\\)",
            "fields": [
                {
                "description": "Channel Number",
                "group": 1,
                "output_format": "Channel: {value}"
                },
                {
                "description": "DDR Size Value",
                "group": 2,
                "output_format": "DDR Size: {value}"
                },
                {
                "description": "DDR Size Human Readable",
                "group": 3,
                "output_format": "({value})"
                }
            ],
            "output_format": "Channel {1}: DDR Size {2} ({3})",
            "improper_print_message": "improper print - DIMM Size not found"
        }
    ]
}
